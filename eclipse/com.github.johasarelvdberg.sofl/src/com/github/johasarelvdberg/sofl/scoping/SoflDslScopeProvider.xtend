/*
 * generated by Xtext 2.25.0
 */
package com.github.johasarelvdberg.sofl.scoping

import com.github.johasarelvdberg.sofl.soflDsl.ComposedElement
import com.github.johasarelvdberg.sofl.soflDsl.EnumerateValue
import com.github.johasarelvdberg.sofl.soflDsl.ExtendType
import com.github.johasarelvdberg.sofl.soflDsl.SoflModule
import com.github.johasarelvdberg.sofl.soflDsl.SoflType
import com.github.johasarelvdberg.sofl.soflDsl.TypeIdentifier
import com.github.johasarelvdberg.sofl.soflDsl.TypeLower
import java.util.Objects
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.IScope
import com.github.johasarelvdberg.sofl.soflDsl.PortReference
import com.github.johasarelvdberg.sofl.soflDsl.SoflBehaviour
import com.github.johasarelvdberg.sofl.soflDsl.SoflVariableName
import com.github.johasarelvdberg.sofl.soflDsl.ConnectionName
import com.github.johasarelvdberg.sofl.soflDsl.SoflProcess
import com.github.johasarelvdberg.sofl.soflDsl.PortDeclarations

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SoflDslScopeProvider extends AbstractSoflDslScopeProvider {

	override getScope(EObject context, EReference reference) {
		var scope = IScope.NULLSCOPE
		val module = EcoreUtil2.getContainerOfType(context.eContainer, SoflModule)
		if(context instanceof  SoflType ) {			
			return getModuleTypeScope(module, scope)
		}else if( context instanceof ExtendType) {
			return getModuleTypeScope(module, scope)
		}else{
			return delegateGetScope(context, reference);
		}		
	}
	
	def IScope classScopeFor(Iterable<? extends EObject> name) {
		var names = name.filter[it !== null]
		if (names === null) {
			throw new RuntimeException('parameters names is null')
		} else {
			for (current : names) {
				if (current === null) {
					throw new RuntimeException('element in the list names is null')
				}
			}
		}
		Scopes.scopeFor(names)
	}

	def IScope classScopeFor(Iterable<? extends EObject> name, IScope scope) {
		var names = name.filter[it !== null]
		if (names === null) {
			throw new RuntimeException('parameters names is null')
		} else if (scope === null) {
			throw new RuntimeException('parameters scope is null')
		} else {
			for (current : names) {
				if (current === null) {
					throw new RuntimeException('element in the list names is null')
				}
			}
		}
		Scopes.scopeFor(names, scope)
	}

	def IScope getFunctionInScope(SoflModule module, IScope scope) {
		var tmp_scope = if (module.parent !== null) {
				getFunctionInScope(module.parent, scope)
			} else {
				scope
			}
		tmp_scope = if (module.func_spec.length > 0) {
			var lst = module.func_spec.map[it.name]
			classScopeFor(lst, tmp_scope)
		} else {
			tmp_scope
		}
		tmp_scope
	}
	
	
	def IScope getModuleTypeScope(SoflModule module, IScope scope) {
		if (module !== null) {
			var tmp_scope = if (module.parent !== null) {
					getModuleTypeScope(module.parent, scope)
				} else {
					scope
				}
			tmp_scope = if (module.types !== null) {
				var lst = EcoreUtil2.getAllContentsOfType(module, TypeIdentifier)
				classScopeFor(
					EcoreUtil2.getAllContentsOfType(module, ComposedElement),
					classScopeFor(EcoreUtil2.getAllContentsOfType(module, EnumerateValue),
						classScopeFor(lst,  tmp_scope)
					))
			} else {
				tmp_scope
			}
			tmp_scope
		} else {
			scope
		}
	}
}
